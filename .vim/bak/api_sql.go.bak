// api_sql.go is a script that will update the SQL file for generating the
// test API database.
package main

import (
	"bytes"
	"errors"
	"os"
	"os/exec"
	"path"
	"strings"

	"github.com/AmberEngine/api/config"
	"github.com/AmberEngine/api/lib"
)

// tempDatabaseName is the name which will be used when creating the database
// which will temporarily story the structure and data to be exported to the
// outputted SQL file.
const tempDatabaseName = "api_models_test"

// createDatabase generates a new, temporary database and fills it with data.
func createDatabase(sql *bytes.Buffer) error {
	errorBuffer := bytes.NewBufferString("")

	dropDBCmd := exec.Command("dropdb", tempDatabaseName, "--if-exists")
	createDBCmd := exec.Command("createdb", tempDatabaseName, "--owner=doodle")
	updateDBCmd := exec.Command("psql", tempDatabaseName)

	dropDBCmd.Stderr = errorBuffer
	if dropDBCmd.Run() != nil {
		return errors.New(errorBuffer.String())
	}
	errorBuffer.Reset()

	createDBCmd.Stderr = errorBuffer
	if createDBCmd.Run() != nil {
		return errors.New(errorBuffer.String())
	}
	errorBuffer.Reset()

	updateDBCmd.Stdin = sql
	updateDBCmd.Stderr = errorBuffer
	if updateDBCmd.Run() != nil {
		return errors.New(errorBuffer.String())
	}

	return nil
}

// deleteProducts deletes all products which do not meet the specified
// criteria (as described in the selectionCriteria SQL array) from the
// temporary Postgres database.
func deleteProducts() error {
	selectionCriteria := []string{
		"(SELECT id FROM product_entity ORDER BY id asc LIMIT 1000)",
		"(SELECT product_id FROM visibility_component WHERE active = true and meets_posting_requirements = true ORDER BY product_id ASC LIMIT 20)",
		"(SELECT product_id FROM visibility_component WHERE active = false and meets_posting_requirements = false ORDER BY product_id ASC LIMIT 20)",
		"(SELECT DISTINCT product_id FROM sales_channel_product ORDER BY product_id ASC LIMIT 100)",
		"(SELECT product_id FROM manufacturer, manufacturer_component WHERE manufacturer.id = manufacturer_component.manufacturer_id AND manufacturer.active = false ORDER BY product_id ASC LIMIT 100)",
		"(SELECT product_id FROM manufacturer, manufacturer_component WHERE manufacturer.id = manufacturer_component.manufacturer_id AND manufacturer.active = true ORDER BY product_id ASC LIMIT 100)"}

	sql := lib.Join(
		" ",
		"DELETE FROM product_entity WHERE id NOT IN",
		lib.Join("", "(", lib.Join(" UNION ", selectionCriteria...), ")"),
		"ORDER BY id ASC);")

	cmd := exec.Command("psql", tempDatabaseName)
	cmd.Stdin = strings.NewReader(sql)
	errorBuffer := bytes.NewBufferString("")
	cmd.Stderr = errorBuffer

	if cmd.Run() != nil {
		return errors.New(errorBuffer.String())
	}
	return nil
}

// dumpDatabase creates a dump of the structure and data of the specified
// database. This dump is returned as a Buffer of bytes.
func dumpDatabase(dbName string, output *bytes.Buffer) error {
	if output == nil {
		panic("Output buffer pointer cannot be nil!")
	}

	errorBuffer := bytes.NewBufferString("")
	dumpCmd := exec.Command("pg_dump", dbName)
	dumpCmd.Stdout = output
	dumpCmd.Stderr = errorBuffer

	if dumpCmd.Run() != nil {
		return errors.New(errorBuffer.String())
	}
	return nil
}

// main is the entry point for this script. From here, a dump of the
// current database is generated and saved. A temporary copy of the database
// is then created. This copy will be modified so only a select number
// of products and associated (sub-)components will remain. Finally, this
// temporary database will be dumped into the test-SQL file.
func main() {
	dbName := config.String("sql", "database")
	testFile := config.String("sql", "test-database") + ".sql"

	sqlOutput := bytes.NewBufferString("")

	err := dumpDatabase(dbName, sqlOutput)
	if err != nil {
		panic(err)
	}

	err = createDatabase(sqlOutput)
	if err != nil {
		panic(err)
	}

	deleteProducts()
	sqlOutput.Reset()

	err = dumpDatabase(tempDatabaseName, sqlOutput)
	if err != nil {
		panic(err)
	}

	cwd, err := os.Getwd()
	if err != nil {
		panic(err)
	}

	outputFile, err := os.Create(path.Join(cwd, testFile))
	if err != nil {
		panic(err)
	}
	defer outputFile.Close()

	_, err = outputFile.Write(sqlOutput.Bytes())
	if err != nil {
		panic(err)
	}
}
