"""generate public and private keys

Revision ID: 19a658409ccf
Revises: 525cdcef7cad
Create Date: 2015-03-02 16:22:30.082851

"""

# revision identifiers, used by Alembic.
revision = '19a658409ccf'
down_revision = '525cdcef7cad'

from alembic import op
from amber_portal.lib.utils import amber_api_connection
from amber_lib import filter
from sqlalchemy.sql import text


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    api_conn = amber_api_connection()
    conn = op.get_bind()
    users = conn.execute("select id, email, name, manufacturer_id from cm_user").fetchall()
    users = [dict(zip(['id', 'email', 'name', 'manufacturer_id'], u)) for u in users]
    for user in users:
        roles = conn.execute(text("select name from cm_user_role as r left join cm_user_roles as s on r.id=s.cm_user_role_id where s.cm_user_id=:user_id"), user_id=user['id']).fetchall()
        api_role = []
        for role in roles:
            if role[0] == 'portal_admin':
                api_role.append('channel_manager_admin')
            elif role[0] == 'manufacturer_employer':
                api_role.append('mfr_admin')
            elif role[0] == 'employee':
                api_role.append('mfr_employee')
            else:
                api_role.append('mfr_admin')

        api_key_payload = {
            'name': user['email'],
            'roles': api_role,
            'manufacturer_id': user['manufacturer_id'],
            'api_key_type': 'user_key'
        }

        api_conn.APIKey.from_dict(api_key_payload).save()

        conn.execute(text("update cm_user set public=:public, private=:private where id=:user_id"), public=data.get('public'), private=data.get('private'), user_id=user['id'])
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    api_conn = amber_api_connection()
    conn = op.get_bind()
    users = conn.execute("select public from cm_user").fetchall()
    for user in users:
        where = filter.Predicate(
            'public',
            filter.equal(user[0])
        )
        api_conn.APIKey.query(filtering=where).delete()
    ### end Alembic commands ###
